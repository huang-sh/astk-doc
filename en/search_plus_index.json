{"./":{"url":"./","title":"Introduction","keywords":"","body":"Introduction Alternative splicing (AS) is pervasive and a key regulatory mechanism leading to diverse protein isoforms with distinct functions. Next-generation sequencing has enabled genome-wide studies of alternative splicing. However, AS analysis of the massive amount of transcriptomic data generated by RNA-Seq is challenging due to the limited functions of current software packages. A comprehensive and flexible pipeline for AS analysis is lacking. We present ASTK, a computational software integrating diverse tools to systematically analyze AS events: including clustering AS genes based on spliced exon lengths, functional enrichment analysis for spliced genes and spliced exons respectively, identifying binding motifs of RNA-binding proteins (RBPs) surrounding splice sites, and charactering splicing-associated histone marks and chromatin signatures. ASTK was tested using experimental datasets to show its effectiveness and reliability. Together, ASTK will facilitate the functional characterization of AS events and improve our understanding of splicing regulation. "},"part0/Installation.html":{"url":"part0/Installation.html","title":"Installation","keywords":"","body":"安装 ASTK 只适用于Linux 系统，如果需要在Window 系统使用，可以在Window上安装WSL 或者虚拟机。 常规安装 首先，利用conda 为astk创建一个虚拟环境，虽然这不是必须的，但是建议这样做。 ## 创建一个新环境名为askt, 同时安装 Python 和 R $ conda create -n astk -c conda-forge r-base=4.1 python=3.8 -y ## 激活环境 astk $ conda activate astk ## 安装两个依赖软件 $ conda create -n astk -c bioconda bedtools meme -y 从PyPi安装astk（当前不要使用该安装方式!） $ pip install astk 或者从github安装astk ## install the development version from github $ pip install git+https://github.com/huang-sh/astk.git@dev 安装完astk后， 还需要安装一些依赖的R包， 建议配置一下特定的 R 执行路径，如果该R 已经安装了许多R 包，这会节省许多时间和资源。 这是一个例子， 你可以在你机器上配置合适的R路径。 $ conda activate R41 $ which R ~/software/anaconda/envs/R41/bin/R astk 配置指定R. astk config -R ~/software/anaconda/envs/R41/bin/R 这不是必须的，如果你的机器上没有合适的R，可以不用配置 之后，可以利用该行代码来安装依赖的R包，astk 会根据之前设置的R 来下载相应的依赖包，如果已存在就不会重复安装。所以对于一个已经安装了许多软件的R 而言，这会节省不少时间。如果之前未配置 R 路径，astk 会使用当前环境下的R。 $ astk install -r ... 安装过程中，有些R包会安装失败， 可以尝试使用conda 来进行安装 Docker 安装 如果你机器上可以使用Docker, 那直接使用Docker 来安装软件会节省不少时间。 $ docker pull huangshing/astk astk docker usage 这里介绍一下如何使用docker 版的 astk 首先利用命令 alias 创建一个别名 $ alias astkdocker=\"docker run --rm -v /home/test/project:/project -e MY_USER=$(id -u) huangshing/astk\" 其中将 /home/test/project 替换成你机器上的路径， 该路径下应该存放着，你需要分析的所有数据文件和参考文件等。 然后这样调用 astk $ astkdocker astk meta -h Usage: astk meta [OPTIONS] generate metadata template file Options: -c1, --ctrl PATH file path for condtion 1 [required] -c2, --case PATH file path for condtion 2 [required] -gn, --groupName TEXT group name -repN, --replicate INTEGER replicate, number -o, --output PATH metadata output path [required] -repN1, --replicate1 INTEGER replicate1, number -repN2, --replicate2 INTEGER replicate2, number --condition TEXT condition name -fn, --filename file name --split TEXT name split symbol and index -h, --help Show this message and exit. "},"part0/0_meta.html":{"url":"part0/0_meta.html","title":"Preparation","keywords":"","body":"Preparation 转录本定量 astk 的输入为转录本的TPM定量文件。转录本的TPM定量文件可以通过salmon获取. 参考教程 示例代码： $ salmon index -t gentrome.fa.gz -d decoys.txt -p 12 -i salmon_index --gencode $ salmon quant -i salmon_index --gcBias --useVBOpt --seqBias -r ENCFF329ACL.fastq.gz --validateMappings -o fb_e11.5_rep1 -p 30 $ ls fb_e11.5_rep1 aux_info cmd_info.json lib_format_counts.json libParams logs quant.sf 注： 对于来自GENCODE的数据 --gencode 必须加上 假设我们已经定量好了以下数据： $ ll data/quant | cut -d \" \" -f 5- 146 Oct 30 2021 fb_e11.5_rep1 146 Oct 30 2021 fb_e11.5_rep2 146 Oct 30 2021 fb_e12.5_rep1 146 Oct 30 2021 fb_e12.5_rep2 146 Oct 30 2021 fb_e13.5_rep1 146 Oct 30 2021 fb_e13.5_rep2 146 Oct 30 2021 fb_e14.5_rep1 146 Oct 30 2021 fb_e14.5_rep2 146 Oct 30 2021 fb_e15.5_rep1 146 Oct 30 2021 fb_e15.5_rep2 146 Oct 30 2021 fb_e16.5_rep1 146 Oct 30 2021 fb_e16.5_rep2 146 Oct 30 2021 fb_p0_rep1 146 Oct 30 2021 fb_p0_rep2 meta meta 是一个用于为差异可变剪切分析生成对照组和处理组的对照信息表格的一个子命令。 meta 参数设置如下： -o: 输出文件地址 -repN: 各组的重复样本数目 -c1: condition 1(ctrl) 样本转录本定量文件路径 -c2: condition 2(case) 样本转录本定量文件路径 -gn: 对照组名设置 例1 如果我们要生成以fb_e11.5 为控制组， 其他阶段数据为处理组，进行差异可变剪切分析，可以这样运行命令： $ mkdir metadata -p $ astk meta -o metadata/fb_e11_based -repN 2 \\ -c1 data/quant/fb_e11.5_rep*/quant.sf \\ -c2 data/quant/fb_e1[2-6].5_rep*/quant.sf data/quant/fb_p0_rep*/quant.sf \\ -gn fb_e11_12 fb_e11_13 fb_e11_14 fb_e11_15 fb_e11_16 fb_e11_p0 输出为一个CSV文件和JSON文件，CSV文件便于查看， JSON文件用于后续分析。 例2 如果我们要生成以相邻阶段分别为控制组和处理组，进行差异可变剪切分析，可以这样运行命令： $ mkdir metadata -p $ astk meta -o metadata/fb_adj_based -repN 2 \\ -c1 data/quant/fb_e1[1-6].5_rep*/quant.sf \\ -c2 data/quant/fb_e1[2-6].5_rep*/quant.sf data/quant/fb_p0_rep*/quant.sf \\ -gn fb_e11_12 fb_e12_13 fb_e13_14 fb_e14_15 fb_e15_16 fb_e16_p0 "},"part1/suppa2.html":{"url":"part1/suppa2.html","title":"单步分析","keywords":"","body":"SUPPA2 ASTK 中的可变剪切事件推断、PSI计算和差异可变剪切计算是基于SUPPA2算法原理发展而来。以下3个命令与SUPPA2中的命令同名，适合于单步分析计算。在大多数情况下，更推荐使用dsflow generateEvent generateEvent 是基于基因组注释GTF文件来推断可变剪切事件。 generateEvent 参数设置如下: -gtf: 基因组注释GTF文件 -et: 可变剪切事件类型 [ALL|SE|A5|A3|MX|RI|AF|AL] --split：根据AS事件的组成型exon是否为转录本第一个或者最后一个exon，[inner|FTE|LTE] -o: output path 示例： $ astk generateEvent -gtf gencode.vM25.annotation.gtf -et SE \\ -o result/fb_e11_based/ref/gencode.vM25 $ head gencode.vM25_SE_strict.ioe seqname gene_id event_id alternative_transcripts total_transcripts chr1 ENSMUSG00000025900.13 ENSMUSG00000025900.13;SE:chr1:4293012-4311270:4311433-4351910:- ENSMUST00000208660.1 ENSMUST00000208660.1,ENSMUST00000208793.1 chr1 ENSMUSG00000025902.13 ENSMUSG00000025902.13;SE:chr1:4492668-4493100:4493466-4493772:- ENSMUST00000027035.9 ENSMUST00000027035.9,ENSMUST00000192650.5,ENSMUST00000191647.1 chr1 ENSMUSG00000025902.13 ENSMUSG00000025902.13;SE:chr1:4492668-4493100:4493490-4493772:- ENSMUST00000116652.7 ENSMUST00000116652.7,ENSMUST00000192650.5,ENSMUST00000191647.1 psiPerEvent psiPerEvent 基于转录本TPM值来计算可变剪切事件的PSI值。 命令参数设置如下： -o: output path -qf: 转录本定量文件 -ioe: 可变剪切事件参考ioe 文件，由generateEvent生成 --tpmThreshold：转录本TPM值最低阈值 示例： $ astk psiPerEvent -o fb_SE_e10.psi \\ -qf data/quant/fb_e10.5_rep*/quant.sf \\ -ioe gencode.vM25_SE_strict.ioe $ head fb_SE_e10.psi event_id fb_e10.5_rep1 fb_e10.5_rep2 ENSMUSG00000025900.13;SE:chr1:4293012-4311270:4311433-4351910:- 1.0 1.0 ENSMUSG00000025902.13;SE:chr1:4492668-4493100:4493466-4493772:- 0.50685587094156 0.49103663421745114 ENSMUSG00000025902.13;SE:chr1:4492668-4493100:4493490-4493772:- 0.7405788514940302 0.697045848727448 ENSMUSG00000025902.13;SE:chr1:4493863-4495136:4495942-4496291:- 0.20508467461294735 0.16355428896798765 ## 该命令也会从转转录本定量文件中提取转录本TPM数据 $ head fb_SE_e10.tpm -n 3 fb_e10.5_rep1 fb_e10.5_rep2 ENSMUST00000193812.1 0.0 0.0 ENSMUST00000082908.1 0.0 0.0 diffSplice diffSplice 用于计算差异可变剪切事件。 命令参数设置如下： -psi: PSI文件，重复样本PSI值需要在同一个文件内 -exp: 转录本TPM文件，重复样本TPM值需要在同一个文件内 -ref: ioe 参考文件 -o: 输出文件 -m: 方法[empirical|classical]，default=empirical 示例： $ astk diffSplice -psi fb_SE_e11.psi fb_SE_e16.psi\\ -exp fb_SE_e11.tpm b_SE_e16.tpm\\ -ref gencode.vM25_SE_strict.ioe \\ -o fb_SE_e10_e16.dpsi "},"part1/dsflow.html":{"url":"part1/dsflow.html","title":"dsflow","keywords":"","body":"dsflow dsflow 提供了可变剪切事件推断、可变剪切事件PSI计算、差异可变剪切分析和显著结果筛选。同时，该命令可以对多组对照组进行分析。 命令参数设置如下： -od: 输出目录 -md: metadata json文件， 由命令meta生成 -gtf: 基因组注释GTF文件 -et: 可变剪切事件类型[ALL|SE|A5|A3|MX|RI|AF|AL] -m: 差异AS计算方法， [empirical|classical] -p：显著性AS事件p-val 阈值 -adpsi: 显著性AS事件 dPSI 绝对阈值 示例： $ mkdir result $ astk dsflow -od result/fb_e11_based -md metadata/fb_e11_based.json \\ -gtf gencode.vM25.annotation.gtf -t ALL & $ ls result/fb_e11_based dpsi psi ref sig01 tpm 输出目录包含四个文件夹： ref 用于存放可变剪切事件ioe参考文件 tpm 用于存放转录本TPM 文件 psi 用于存放可变剪切事件PSI文件 dpsi 用于存放可变剪切事件dPSI文件 sig01 用于存放统计显著性得差异可变剪切事件 "},"part1/event_process.html":{"url":"part1/event_process.html","title":"AS events process","keywords":"","body":"可变剪切事件处理 dPSI 过滤 sigFilter用于根据dPSI和p-value 来筛选显著性可变剪切事件。目前支持过滤SUPPA2和rMATS得输出结果。sf 是sigFilter别名。 该命令参数设置如下： -i: 输入dpsi文件 -o: 输出文件 -adpsi: 绝对dPSI 阈值 -p: p-value 阈值, 默认为0.05 -dpsi: dPSI 阈值, 默认为0 -sep: 如果设置，输出文件会根据 dPSI>0 和 dPSI -app: 输入文件是什么软件的输出结果, 默认自动推断 PSI 过滤 psiFilter 用于根据PSI值，进行可变剪切事件挑选。pf 是psiFilter别名。 该命令参数设置如下： -i: 输入psi文件 -o: 输出文件 -psi: PSI 阈值, 如果输入参数大于0，则挑选PSI大于该阈值的事件，如果小于0，则挑选PSI小于该阈值的事件 -qt: 根据PSI 的百分比进行挑选 示例： $ astk pf -i result/fb_e11_based/psi/fb_e11_p0_SE_case.psi \\ -psi 0.8 -o result/fb_e11_based/psi/fb_p0_SE_high.psi $ astk pf -i result/fb_e11_based/psi/fb_e11_p0_SE_case.psi \\ -psi -0.2 -o result/fb_e11_based/psi/fb_p0_SE_low.psi 长度聚类 lenCluster 用于基于可变exon的长度进行分类可变剪切事件。lc 是lenCluster别名。 该命令参数如下: -i: 输入文件 -lr: 长度聚类 -od: 输出目录 示例： $ astk lc -i result/fb_e11_based/sig01/*dpsi -lr 1 51 251 1001 \\ -od result/fb_e11_based/lenc $ ls result/fb_e11_based/lenc 1-51 251-1001 51-251 "},"part1/evet_analysis.html":{"url":"part1/evet_analysis.html","title":"AS event analysis","keywords":"","body":"可变剪切事件分析 事件分布 barplot barplot 用于绘制不同条件、事件类型的可变剪切数目分布。 该命令参数设置如下： -i: 输入文件 -o: 输出图片 -dg: AS 事件将根据dPSI的正方划分为两组 (group +: dPSI > 0, group -: dPSI -xl: x 轴标签 示例： astk barplot -i result/fb_e11_based/sig01/fb_e11_p0_*.sig.dpsi \\ -o img/fb_e11_p0_bar.png -dg -xl A3 A5 AF AL MX RI SE upset plot upset 用于绘制可变剪切事件的在不同组的交集图。 参数设置如下： -i: dpsi文件 -o: 输出文件 -xl: x 轴标签 -dg: AS 事件将根据dPSI的正方划分为两组 (group +: dPSI > 0, group -: dPSI 示例： $ astk upset -i result/fb_e11_based/sig01/fb_e11_12_SE.sig.dpsi \\ result/fb_e11_based/sig01/fb_e11_14_SE.sig.dpsi \\ result/fb_e11_based/sig01/fb_e11_16_SE.sig.dpsi \\ -o img/fb_upset.png -xl e11_12 e11_14 e11_16 -dg PSI/dPSI 分析 PCA pca根据PSI值来绘制PCA图. 参数设置如下： -i: psi文件 -o: 输出图片路径 -fmt: 图片格式 --width: 图片长度 --height：图片高度 -gn: 分组名 示例： $ astk pca -i result/fb_e11_based/psi/fb_e11_12_SE_c1.psi \\ result/fb_e11_based/psi/fb_e11_1[2-6]_SE_c2.psi \\ result/fb_e11_based/psi/fb_e11_p0_SE_c2.psi \\ -o img/fb_pca.png -fmt png --width 6 --height 4 \\ -gn fb_e11.5 fb_e12.5 fb_e13.5 fb_e14.5 fb_e15.5 fb_e16.5 fb_p0 heatmap plot heatmap 用于绘制PSI热图. hm是heatmap的别名. 参数设置如下： -i: psi文件 -o: 输出图片 -fmt: 图片格式 示例： $ astk hm -i result/fb_e11_based/sig01/psi/fb_e11_12_SE_c1.sig.psi \\ result/fb_e11_based/sig01/psi/fb_e11_1*_SE_c2.sig.psi \\ -o img/fb_hm.png -fmt png volcano plot volcano 用于绘制dPSI火山图。 vol是volcano的别名 参数设置如下: -i: dpsi文件 -o: 输出文件 示例： $ astk volcano -i result/fb_e11_based/dpsi/fb_e11_p0_SE.dpsi \\ -o img/fb_e11_p0_SE.vol.png "},"part2/seq_feature.html":{"url":"part2/seq_feature.html","title":"Sequence feature","keywords":"","body":"序列特征 剪切位点强度 ASTK的剪切位点强度计算基于MaxEntScan的Perl脚本的重实现。 spliceScore 用于计算5'/3'剪切位点强度。sss是其别名。 参数设置如下： -e: AS事件文件地址 -od：输出目录 -fi：基因组fasta序列文件 -app：事件是什么软件的输出 [auto|SUPPA2|rMATS] -p：进程数，默认为4 示例 $ mkdir sss $ astk sss -e result/fb_e11_based/psi/fb_p0_SE_high.psi -od sss/fb_p0_SE_high -fi GRCm38.primary_assembly.genome.fa $ tree sss/fb_p0_SE_high ├── A0_5SS │ ├── A0_5SS.bed │ └── A0_5SS.fa ├── A1_3SS │ ├── A1_3SS.bed │ └── A1_3SS.fa ├── A2_5SS │ ├── A2_5SS.bed │ └── A2_5SS.fa ├── A3_3SS │ ├── A3_3SS.bed │ └── A3_3SS.fa ├── splice_scores_box.png └── splice_scores.csv 4 directories, 10 files 其中bed文件为bed 剪切位点区域的坐标，对于5'位点， exon部分3nt,intron 6nt, 共9nt的长度；对于3'位点， exon部分3nt,intron 20nt, 共23nt的长度。 其中fa文件为对应区域的fasta序列，对于负链的序列为反向互补序列。 splice_scores.csv 为剪切位点强度的csv文件 splice_scores_box.png剪切强度箱型图 GC 含量 gcc 用于计算各个剪切位点侧翼区间的GC含量值。 参数设置如下： -e: AS事件文件地址 -od：输出目录 -fi：基因组fasta序列文件 -bs: bin size 或滑动窗口大小 -ef: exon 侧翼长度 -if：intron 侧翼长度 -app：事件是什么软件的输出 [auto|SUPPA2|rMATS] -p：进程数，默认为4 示例： $ mkdir gcc $ astk gcc -e result/fb_e11_based/psi/fb_p0_SE_high.psi \\ -od gcc/fb_p0_AF_high -ef 150 -if 150 -bs 75 \\ -fi GRCm38.primary_assembly.genome.fa $ tree gcc/fb_p0_AF_high ├── A1_5SS │ ├── A1_5SS_dws.bed │ ├── A1_5SS_dws.fa │ ├── A1_5SS_dws_gcc.csv │ ├── A1_5SS_ups.bed │ ├── A1_5SS_ups.fa │ └── A1_5SS_ups_gcc.csv ├── A2_3SS │ ├── A2_3SS_dws.bed │ ├── A2_3SS_dws.fa │ ├── A2_3SS_dws_gcc.csv │ ├── A2_3SS_ups.bed │ ├── A2_3SS_ups.fa │ └── A2_3SS_ups_gcc.csv ├── A3_5SS │ ├── A3_5SS_dws.bed │ ├── A3_5SS_dws.fa │ ├── A3_5SS_dws_gcc.csv │ ├── A3_5SS_ups.bed │ ├── A3_5SS_ups.fa │ └── A3_5SS_ups_gcc.csv ├── A4_3SS │ ├── A4_3SS_dws.bed │ ├── A4_3SS_dws.fa │ ├── A4_3SS_dws_gcc.csv │ ├── A4_3SS_ups.bed │ ├── A4_3SS_ups.fa │ └── A4_3SS_ups_gcc.csv └── gcc.png 4 directories, 25 files exon/intron 长度 elen 用于计算相邻2个剪切位点之间的元件长度。 参数设置如下： -e: AS事件文件地址 -od：输出目录 -log: 将长度值进行log2转换 示例： $ mkdir len $ astk elen -e result/fb_e11_based/psi/fb_e11_p0_AF_high.psi -od len/fb_p0_AF -log $ ls len/fb_p0_A element_len.csv element_len.png "},"part3/enrichment.html":{"url":"part3/enrichment.html","title":"Function enrichment","keywords":"","body":"功能富集分析 过表达富集分析 enrich 用于执行过表达富集分析，支持GO,GEKK, Reactome。基于clusterProfile 和 ReactomePA 实现。此外也基于simplifyEnrichment 提供GO term富集结果聚类功能。 参数设置如下： -i: 输入文件 -od: 输出目录 -db： 数据库 [GO|KEGG|Reactome] -ont: GO ontology [ALL|BP|CC|MF] -pval : p-value -qval : q-value -org : 物种, ‘hs’ for human, ‘mm’ for mouse --simple: 简化GO富集结果 -gene_id： gene ID 类型 示例 $ mkdir output/enrich -p $ astk enrich -i result/fb_e11_based/sig01/fb_e11_13_SE.sig.dpsi \\ -ont BP -qval 0.1 -orgdb mm -fmt png \\ -od output/enrich/fb_e11_13_SE --simple $ tree output/enrich/fb_e11_13_SE img/enrich/fb_e11_13_SE_doc_sc ├── GO.BP.qval0.1_pval0.1.csv ├── GO.BP.qval0.1_pval0.1.png └── simgo ├── GO_BP_simple.csv └── GO_BP_simple.png 1 directory, 4 files GO.BP.qval0.1_pval0.1.csv 是文本形式的富集结果， GO.BP.qval0.1_pval0.1.png为图片 GO_BP_simple.csv 为GO terms 简化聚类结果，GO_BP_simple.png 为图片 功能富集比较 enrichCompare 用于不同组功能富集结果比较 。ecmp 为别名。 参数设置如下： -i: 多个输入文件 -od: 输出目录 -db： 数据库 [GO|KEGG|Reactome] -ont: GO ontology [ALL|BP|CC|MF] -pval : p-value -qval : q-value -org : 物种, ‘hs’ for human, ‘mm’ for mouse -gene_id： gene ID 类型 示例 $ astk ecmp -i result/fb_e11_based/lenc/*/fb_e11_12_SE.sig.dpsi \\ -ont BP -org mm -fmt png \\ -od output/enrich/fb_e11_12_SE_lc NEASE nease 为基于可变exon的结构注释的网络富集分析, 基于NEASE发展而来。目前只支持人。 参数设置如下： -i: dpsi file -od : output directory -pval : p-value -org : 只能设置为Human -db: NEASE 支持数据库,[PharmGKB|HumanCyc|Wikipathways|Reactome|KEGG|SMPDB|Signalink|NetPath|EHMN|INOH|BioCarta|PID] 示例： mkdir output/nease astk nease -i result/ni_adj_ct/sig01/0_3_SE.sig.dpsi \\ -pval 0.1 -db Reactome KEGG -od output/nease/ni_0_3_SE "},"part4/motif.html":{"url":"part4/motif.html","title":"motif analysis","keywords":"","body":"Moitf 分析 对可变剪切位点侧翼序列进行motif分析， ASTK 会对所有剪切位点进行Motif分析。依赖于meme-suite 实现。ASTK 内置了CIS-BP-RNA 和 ATtRACT 两个RBP 数据库， 可直接使用这两个数据库。 Motif富集分析 Motif富集分析可用于查看不同条件下RBP结合亲和力差异。ASTK 使用子命令motifEnrich来实现，me是别名。 参数设置如下： -te: 处理组可变剪切事件 -ce：对照组可变剪切事件 -od： 输出目录 -db： RBP motif数据库[ATtRACT|CISBP-RNA] -org: 物种 -fi: 基因组fasta序列 示例 $ mkdir output/motif $ astk me -te result/fb_e11_based/psi/fb_p0_SE_high.psi \\ -ce result/fb_e11_based/psi/fb_p0_SE_low.psi \\ -od output/motif/fb_e11_p0_SE_me -org mm \\ -fi GRCm38.primary_assembly.genome.fa $ tree output/motif/fb_e11_p0_SE_me motif/fb_e11_p0_SE_me ├── A0_5SS │ ├── A0_5SS.bed │ ├── A0_5SS.fa │ ├── ame.html │ ├── ame.tsv │ └── sequences.tsv ├── A1 │ ├── A1_ctrl.bed │ └── A1_ctrl.fa ├── A1_3SS │ ├── A1_3SS.bed │ ├── A1_3SS.fa │ ├── ame.html │ ├── ame.tsv │ └── sequences.tsv ├── A2 │ ├── A2_ctrl.bed │ └── A2_ctrl.fa ├── A2_5SS │ ├── A2_5SS.bed │ ├── A2_5SS.fa │ ├── ame.html │ ├── ame.tsv │ └── sequences.tsv ├── A3 │ ├── A3_ctrl.bed │ └── A3_ctrl.fa ├── A3_3SS │ ├── A3_3SS.bed │ ├── A3_3SS.fa │ ├── ame.html │ ├── ame.tsv │ └── sequences.tsv ├── A4 │ ├── A4_ctrl.bed │ └── A4_ctrl.fa └── heatmap.pdf Motif发现 ASTK 使用子命令motifFind来实现motif的发现和与已知RBP motif进行比对，mf是别名。 参数设置如下： -te: 处理组可变剪切事件 -ce：对照组可变剪切事件 -od： 输出目录 -db： RBP motif数据库[ATtRACT|CISBP-RNA] -org: 物种 -fi: 基因组fasta序列 -pval: p-value astk mf -te result/fb_e11_based/psi/fb_p0_SE_high.psi \\ -ce result/fb_e11_based/psi/fb_p0_SE_low.psi \\ -od output/motif/fb_e11_p0_SE_mf -org mm \\ -fi GRCm38.primary_assembly.genome.fa \\ -db CISBP-RNA $ tree output/motif/fb_e11_p0_SE_mf output/motif/fb_e11_p0_SE_mf ├── A0_5SS │ ├── A0_5SS.bed │ ├── A0_5SS_ctrl.bed │ ├── A0_5SS_ctrl.fa │ ├── A0_5SS.fa │ ├── streme.html │ ├── streme.txt │ ├── streme.xml │ ├── tomtom.html │ ├── tomtom.tsv │ └── tomtom.xml ├── A1_3SS │ ├── A1_3SS.bed │ ├── A1_3SS_ctrl.bed │ ├── A1_3SS_ctrl.fa │ ├── A1_3SS.fa │ ├── streme.html │ ├── streme.txt │ ├── streme.xml │ ├── tomtom.html │ ├── tomtom.tsv │ └── tomtom.xml ├── A2_5SS │ ├── A2_5SS.bed │ ├── A2_5SS_ctrl.bed │ ├── A2_5SS_ctrl.fa │ ├── A2_5SS.fa │ ├── streme.html │ ├── streme.txt │ ├── streme.xml │ ├── tomtom.html │ ├── tomtom.tsv │ └── tomtom.xml └── A3_3SS ├── A3_3SS.bed ├── A3_3SS_ctrl.bed ├── A3_3SS_ctrl.fa ├── A3_3SS.fa ├── streme.html ├── streme.txt ├── streme.xml ├── tomtom.html ├── tomtom.tsv └── tomtom.xml "},"part5/epi.html":{"url":"part5/epi.html","title":"Epigenetic analysis","keywords":"","body":"表观分析 该模块主要用于描述剪切位点附近区域表观信号分布。 signalProfile 绘制剪切位点附近信号热图分布，使用进行绘制。 参数设置： -o: 输出文件 -e: 事件文件 -bw: bigwig文件 -ssl: 剪切位点标签 示例 $ astk pf -i result/fb_e11_based/psi/fb_e11_16_AF_case.psi \\ -psi 0.8 -o result/fb_e11_based/psi/fb_16_AF_high.psi $ astk pf -i result/fb_e11_based/psi/fb_e11_16_AF_case.psi \\ -psi -0.2 -o result/fb_e11_based/psi/fb_16_AF_low.psi $ astk signalProfile -o output/fb_16_AF_high_ATAC.png \\ -e result/fb_e11_based/psi/fb_16_AF_high.psi \\ -bw ATAC.e16.5.fb.bigwig \\ -ssl A1 A2 A3 A4 A5 -fmt png $ astk signalProfile -o output/fb_16_AF_low_ATAC.png \\ -e result/fb_e11_based/psi/fb_16_AF_low.psi \\ -bw ATAC.e16.5.fb.bigwig \\ -ssl A1 A2 A3 A4 A5 -fmt png fb_16_AF_high_ATAC.png fb_16_AF_low_ATAC.png sp2 用于两组信号比较 参数设置 -mat: 由signalProfile 生成的*.mat.gz文件 -o: 输出文件 -gn: 组名 --width: 图宽 --height: 图高 示例 $ astk sp2 -mat output/fb_16_AF_*_ATAC.mat.gz \\ -o output/fb_e16.5_AF_atac.ecmp.pdf -gn high low --width 10 --height 8 "},"part6/utils.html":{"url":"part6/utils.html","title":"Useful utilities","keywords":"","body":""},"References.html":{"url":"References.html","title":"References","keywords":"","body":""}}